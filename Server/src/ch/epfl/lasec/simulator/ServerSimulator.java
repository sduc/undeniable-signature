package ch.epfl.lasec.simulator;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.ServerSocket;
import java.net.Socket;

import ch.epfl.lasec.IOHelper;
import ch.epfl.lasec.mova.ConfirmationProtocol;
import ch.epfl.lasec.mova.DenialProtocol;
import ch.epfl.lasec.mova.KeyPair;
import ch.epfl.lasec.mova.KeyPairGenerator;
import ch.epfl.lasec.mova.Message;
import ch.epfl.lasec.mova.Mova;
import ch.epfl.lasec.mova.MovaSignature;

/**
 * Class used to implement the server for the simulator of MOVA.
 * 
 * @author Sebastien Duc
 *
 */
public class ServerSimulator {
	
	/**
	 * Server socket
	 */
	private ServerSocket serverSocket;
	
	
	/**
	 * Server port to use for the simulator
	 */
	public final static int SERVER_PORT = 12345;
	
	/**
	 * Keys used by to sign.
	 * They are generated by the server.
	 */
	private KeyPair movaKeys;
	
	private Mova movaInstance;
	
	
	/**
	 * Creates a server, and a socket that will listen port SERVER_PORT
	 * @throws IOException
	 */
	public ServerSimulator() throws IOException {
		serverSocket = new ServerSocket(SERVER_PORT);
		movaKeys = new KeyPairGenerator(5, 512, 64/8).generateKeyPair();
		System.out.println("Key pair generated : "+ movaKeys.getPk());
		movaInstance = Mova.createMovaInstance(movaKeys.getPk(), 5, 5, 5);
		System.out.println("Mova instance created : "+ movaInstance);
	}
	
	/**
	 * Start server. Server start listening port and create a new thread for each client.
	 */
	public void startServer(){
		do {
			try {
				
				Socket clientSocket = serverSocket.accept();
				ClientServiceThread clientTread = 
						new ClientServiceThread(clientSocket,movaInstance,movaKeys);
				clientTread.start();
					
			} catch (IOException e) {
				System.out.println("Server listening: error on accept");
				e.printStackTrace();
			}
		} while (true);
	}

}

/**
 * Class used to handle on client.
 * 
 * @author Sebastien Duc
 *
 */
class ClientServiceThread extends Thread {
	
	private Socket socket;
	private Mova movaInstance;
	private KeyPair movaKeys;
	
	public ClientServiceThread(Socket s,Mova mova,KeyPair keyPair) {
		this.socket = s;
		this.movaInstance = mova;
		this.movaKeys = keyPair;
	}
	
	@Override
	public void run() {
		InputStream in = null;
		OutputStream out = null;
		
		System.out.println("New client connected");
		
		try {
			
			in = socket.getInputStream();
			out = socket.getOutputStream();
			
			sendMova(out);
			sendSignedDummyMessage(in,out);
			
			
			
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			
			System.out.println("Client leaving");
			// close everything
			IOHelper.closeQuietly(in);
			IOHelper.closeQuietly(out);
			
			try {
				socket.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
	
	private void sendMova(OutputStream out) throws IOException{
		this.movaInstance.write(out);
		out.write(this.movaKeys.getPk().getEncoded().length);
		out.write(this.movaKeys.getPk().getEncoded());
	}
	
	private void sendSignedDummyMessage(InputStream in, OutputStream out) 
			throws IOException{
		// send dummy message and signature
		Message hello = new Message("Hello, this is a dummy message");
		out.write(hello.getEncoded().length);
		out.write(hello.getEncoded());
		//signature
		MovaSignature sHello = movaInstance.sign(new Message("toto"), movaKeys.getSk());
		System.out.println(sHello);
		out.write(sHello.getEncoded().length);
		out.write(sHello.getEncoded());
		
		// verify signature --- role prover
		ConfirmationProtocol conf = new ConfirmationProtocol(in, out, this.movaInstance);
		boolean b = conf.prover(this.movaKeys.getPk(), this.movaKeys.getSk(), hello, sHello, true);
		if (b)
			System.out.println("Signature verification succeeded");
		else
			System.out.println("Signature verification failed");
		
		DenialProtocol den = new DenialProtocol(in, out, movaInstance);
		b = den.prover(this.movaKeys.getPk(), this.movaKeys.getSk(), hello, sHello, true);
		if (b)
			System.out.println("Signature denial succeeded");
		else
			System.out.println("Signature denial failed");
	}
	
}
